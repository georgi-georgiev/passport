definitions:
  blunder.HTTPError:
    properties:
      action:
        example: Resubmit the request with a valid queue manager name or no queue
          manager name, to retrieve a list of queue managers.
        type: string
      argument:
        description: number, string
        example: number
        type: string
      detail:
        description: (string) A human-readable explanation specific to this occurrence
          of the problem.
        example: 'The parameters: limit, date were not provided'
        type: string
      expression:
        description: greater, not equals, equals, min, max, required, etc.
        example: greater
        type: string
      field:
        example: email
        type: string
      placement:
        example: field
        type: string
      reason:
        example: invalidParameter
        type: string
      reason_code:
        example: 150
        type: integer
      stack_trace:
        example: asda
        type: string
      title:
        description: |-
          (strinrg) A short, human-readable summary of the problem
          type.  It SHOULD NOT change from occurrence to occurrence of the
          problem, except for purposes of localization (e.g., using
          proactive content negotiation; see [RFC7231], Section 3.4).
        example: required parameters are missing
        type: string
      type:
        description: |-
          (string) A URI reference [RFC3986] that identifies the
          problem type.  This specification encourages that, when
          dereferenced, it provide human-readable documentation for the
          problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
          this member is not present, its value is assumed to be
          "about:blank".
        type: string
    type: object
  blunder.HTTPErrorResponse:
    properties:
      correlation_id:
        example: asdas
        type: string
      domain:
        example: global
        type: string
      errors:
        items:
          $ref: '#/definitions/blunder.HTTPError'
        type: array
      instance:
        description: |-
          (strinrg) A URI reference that identifies the specificoccurrence of the problem.
          It may or may not yield further information if dereferenced.
        example: /login/log/abc123
        type: string
      language:
        example: en
        type: string
      recoverable:
        example: true
        type: boolean
      status:
        description: (number) The HTTP status code ([RFC7231], Section 6) generated
          by the origin server for this occurrence of the problem.
        example: 400
        type: integer
      timestamp:
        example: 1692604569
        type: integer
      trace_id:
        example: EJplcsCHuLu
        type: string
    type: object
  passport.CreateRightPayload:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  passport.CreateRolePayload:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  passport.CreateUserPayload:
    properties:
      email:
        type: string
      password:
        type: string
      rights:
        items:
          type: string
        type: array
      role:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  passport.CreateUserResponse:
    properties:
      accessToken:
        example: "1"
        type: string
      expiresIn:
        example: 1687957803
        type: integer
      id:
        example: "1"
        type: string
      refreshToken:
        example: token
        type: string
      tokenType:
        example: Bearer
        type: string
    type: object
  passport.ExchangeCodeRequestPayload:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  passport.ExchangeCodeResponse:
    properties:
      code:
        example: "123456"
        type: string
    type: object
  passport.PasswordResetPayload:
    properties:
      code:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - code
    - email
    - password
    type: object
  passport.RecoveryEmailPayload:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  passport.RightResponse:
    properties:
      name:
        example: default
        type: string
    type: object
  passport.RoleResponse:
    properties:
      name:
        example: admin
        type: string
    type: object
  passport.TokenResponse:
    properties:
      accessToken:
        example: token
        type: string
      expiresIn:
        example: 1687957803
        type: integer
      refreshToken:
        example: token
        type: string
      tokenType:
        example: Bearer
        type: string
    type: object
  passport.UpdateRightPayload:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  passport.UpdateRolePayload:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  passport.UpdateUserPayload:
    properties:
      email:
        type: string
      isActive:
        type: boolean
      shoudlChangePassword:
        type: boolean
      username:
        type: string
    type: object
  passport.UserResponse:
    properties:
      email:
        example: test@test.com
        type: string
      id:
        example: "1"
        type: string
      rights:
        items:
          type: string
        type: array
      role:
        example: basic
        type: string
      username:
        example: test
        type: string
    type: object
info:
  contact: {}
  description: Passport
  title: Passport
  version: "1.0"
paths:
  /admins:
    post:
      consumes:
      - application/json
      description: create admin
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/passport.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
      summary: Create admin
      tags:
      - identity
  /facebook/callback:
    post:
      consumes:
      - application/json
      description: Facebook callback
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/passport.CreateUserResponse'
      summary: Facebook Callback
      tags:
      - identity
  /password-recovery/email:
    post:
      consumes:
      - application/json
      description: email recovery code
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.RecoveryEmailPayload'
      produces:
      - application/json
      responses: {}
      summary: Email recovery code
      tags:
      - identity
  /password-recovery/exchange:
    post:
      consumes:
      - application/json
      description: exchange recovery code
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.ExchangeCodeRequestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.ExchangeCodeResponse'
      summary: Exchange recovery code
      tags:
      - identity
  /password-recovery/reset:
    post:
      consumes:
      - application/json
      description: reset password
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.PasswordResetPayload'
      produces:
      - application/json
      responses: {}
      summary: Reset password
      tags:
      - identity
  /rights:
    get:
      consumes:
      - application/json
      description: get rights
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/passport.RightResponse'
            type: array
      security:
      - OAuth2Application: []
      summary: Get rights
      tags:
      - identity
    post:
      consumes:
      - application/json
      description: create right
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.CreateRightPayload'
      produces:
      - application/json
      responses: {}
      security:
      - OAuth2Application: []
      summary: Create right
      tags:
      - identity
  /rights/{rightId}:
    put:
      consumes:
      - application/json
      description: update role
      parameters:
      - description: "1"
        in: path
        name: rightID
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.UpdateRightPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.RightResponse'
      security:
      - OAuth2Application: []
      summary: Update role
      tags:
      - identity
  /roles:
    get:
      consumes:
      - application/json
      description: get roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/passport.RoleResponse'
            type: array
      security:
      - OAuth2Application: []
      summary: Get roles
      tags:
      - identity
    post:
      consumes:
      - application/json
      description: create role
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.CreateRolePayload'
      produces:
      - application/json
      responses: {}
      security:
      - OAuth2Application: []
      summary: Create role
      tags:
      - identity
  /roles/{roleId}:
    put:
      consumes:
      - application/json
      description: update role
      parameters:
      - description: "1"
        in: path
        name: roleID
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.UpdateRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.RoleResponse'
      security:
      - OAuth2Application: []
      summary: Update role
      tags:
      - identity
  /token:
    post:
      consumes:
      - application/json
      description: get token
      parameters:
      - description: refresh_token
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.TokenResponse'
      security:
      - BasicAuth: []
      summary: Get token
      tags:
      - identity
  /users:
    get:
      consumes:
      - application/json
      description: get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/passport.UserResponse'
            type: array
      security:
      - OAuth2Application: []
      summary: Get users
      tags:
      - identity
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/passport.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/blunder.HTTPErrorResponse'
      summary: Create user
      tags:
      - identity
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: "1"
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - OAuth2Application: []
      summary: Delete user
      tags:
      - identity
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: "1"
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.UserResponse'
      security:
      - OAuth2Application: []
      summary: Get user by id
      tags:
      - identity
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: "1"
        in: path
        name: userID
        required: true
        type: string
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/passport.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/passport.UserResponse'
      security:
      - OAuth2Application: []
      summary: Update user
      tags:
      - identity
  /verify/{token}:
    post:
      consumes:
      - application/json
      description: verify email
      parameters:
      - description: "1"
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Verify email
      tags:
      - identity
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2Application:
    flow: password
    tokenUrl: http://localhost:2525//token
    type: oauth2
swagger: "2.0"
